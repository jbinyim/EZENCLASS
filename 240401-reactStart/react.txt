- codenary

VS code 확장자
-ES7+ React/Redux/React-Native sni (react)
------------------------------------------------------------------------------------------------------------------------
*React.js
- UI를 생성해내기 위한 JS 라이브러리
- 라이브러리 VS 프레임워크

* UI생성을 위한 프론트엔드 & 퍼블리싱 영역의 대표적인 
  프레임워크: vue.js / angluar.js
*라이브러리는 기본적인 웹 표준언어를 활용할 수 있는 여지를 최대한 부여 일부 기능에 한해서만 자신들만의 문법 체계를 활용
<React.js>

Angluar: MS / Js 프레임워크
Vue: 쉬움 / 기능 깊이 얕다 카카오, 순수 JS 최대한의 기능 구현  && 중.난이도

-> facebook, insta, 넷플릭스, 노션

*** React.js 의 강력한 장점 ***
1. 컴포넌트 기반으로 UI구현
- 에뛰드 
- 모든 전페이지에: header & footer
- 만약, header & footer 하나의 독립적인 파일로 생성
- html 에서 JS를 사용할 때 script태그를 사용해서 연동하듯이

2. 가상돔을 활용해서 화면 업데이트 구현
- DOM : 일종의 명세서
1) VS code : html, css js 작성(*문서)
2) 컴퓨터 cpu, ram : DOM
3) 웹브라우저: 문서 구현 (*parse & fetch => render)

React를 실행함과 동시에 가상돔 2개 생성
첫번째 가상돔! 웹브라우저가 랜더링이 된 최초시점의 UI를 기억하고 있는 명세서
두번쨰 사상돔! 첫번째 가상돔에서 업데이트가 된 최종시점의 UI를 기억하고 있는 명세서
=> 첫번째 & 두번째 가상돔 비교해서 업데이트가 된 컴포넌트 재빠르게 바꿔서 렌더링


3. CSR방식을 활용해서 서버의 의존도 낮춤
- 웹 브라우저에서 상태가 변경!! / 업데이트!!
- 기본 전통적인 방식: SSR방식: server side Rendering
- CSR방식: Client Side Rendering

* 웹 브라우저가 읽을 수 있는 3대 언어
- html, css, js
- chorme 웹 브라우저: V8 검색엔진

*Node.js = > 갤럭시 / 아이폰 앱
* npm : node package manager
* npm i 설치하고자하는 앱이름


react는 Node.js에서도 VIP

// 설치 // 
npx create-react-app .  OR npx create-react-app "파일명"

// 삭제파일 //
-src 
> app.test.js
> logo.svg
> reportwebvitals.js
>setuptest.js
- index.js > strictMode 삭제

// 컴포넌트  //

// pull //
(node-modules 가 깃에 안올림)
git-pull / 터미널 npm i

-----------------------------------------------------------------------------------------------------------
SPA : single Page Application

React를 : 컴포넌트 기반의 SPA으로 운영되는 CSR방식의 JS 라이브러리 입니다.

Module : 
Node.js : JS파일 컴포넌트 화 => 여기에서,저기에서 사용 
=> 모듈화로 전환 
=> commonJs 모듈 시스템 구축 - CJS 모듈시스템
=> Ecmascript JS 모듈 시스템 표준!! - ESM 모듈시스템

Component 문법
1) JSX 문법
JS & XML 문법 || xml = extensible mark language

1. 변수선언: 숫자, 문자열, 논리, 배열, 객체, 함수 등 값
* JSX문법에서는 직접 사용할 수 없는 값!!
=> 객체형 타입의 데이터는 직접 사용 불가

2. 반드시 닫힘 규칙!! => markup 규칙

3. 반드시 1개 이상의 부모요소가 존재해야 한다.

4. 삼항조건 연산자 || 조건부 렌더링

5. 원시타입 변수는 직접사용가능
(*단 사용시 { } 표기 필수)

6. 참조타입 변수 중 객체의 경우는 직접 사용불가

7. Props
property의 약어 => 속성(값)
*컴포넌트간에 데이터를 전달할 수 있는 기능
Props 규칙 => 부모 컴포넌트가 자식 컴포넌트에게 일반적으로 데이터를 전달할 수 있음
*형제 컴포넌트간에 어떻게 데이터?
부모 => 자식 O
자식 => 부모 X
형제 => 형제 X

- props는 반드시 부모에서 자녀에게만 데이터를 줄 수 있음
- props의 자료형태는 반드시 객체의 타입
- props로 데이터를 받아올때, 구조분해할당을 통해 바로 변수값을 찾아올수있음
(* 이때 반드시 객체 내 key 네이밍과 동일한 변수명을 설정)
- 심지어 props는 컴포넌트로 전송이 가능함
(* 단 컴포터를 전송할때에는 key값이 children으로 자동 설정됨)


=> useContext / React Hooks
=> middleware / Redux || Recoil || React query
=> Redux thunk 외

- react에서는 외부스타일 사용빈도가 높지 X
=> styled-component
=> tailwind

8. state
=> 상태변화의 값을 컨트롤 하기 위해서 리엑트만의 문법 하나를 더 공부
컴포넌트 안에 존재하는 어떠한 상태 값
(*단 1개의 컴포넌트 안에는 다야항 복수의 state값 존재 가능)
* state의 상태 값을 변화시킬 수 있는 리엑트 혹이 존재
=> usestate 훅 => 함수
*useState 훅 함수 실행 => 배열값을 반환 => 초기값 /초기값을 변경시킬수 있는 함수
*구조분해할당 방식으로 작성
* usestate 리엑트 훅을 사용해서 state의 상태 값이 변경될 때마다 웹 브라우저는 해당 컴포넌트를 다시 랜더링한다 = 다시 새로고침 => 리랜더링

useState
useEffect
useContext
useRef

*react Hooks


// 웹 브라우저 빨간색 경고창이 나왔다는 것은 리액트 실행을 전면적 중단
