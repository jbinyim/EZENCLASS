
Refactoring : cleancode => 특정 요소 관한 기능이포함 되었을 경우 해당 요소 버그 발생시 디버깅을 하기가 매우 비효율적인
상황이 발생 => 미연 방지하기 위해서 각각의 독립적인 기능을 따로 분리시켜놓은 작업 => 향후 코드를 재가공&유비.보수

* Js => 싱글스레드로 작동하는 객체지향 객체지향 프로그래밍 언어
* JS 상위 레벨 이야기
- 명령형 프로그래밍 JS코드 작성
(*지향 / 보편)
- 선언형 프로그래밍 JS코드 작성
(*추세 / 트랜드)
- 실행문 / 표현식문

React => JS 준수한 프로그래밍 코드 단계
=>CRUD
=> Create Read Update Delete

웹 UI / 서버 언어

css : 
- cascading style sheet
1) display
2) position
3) 단위
4) 전,후 문자

*JS 문법
1) 함수
2) 객체 및 배열
3) API

=> 실전 & 반복 => 기출문제

------------------------------------------------------------------------------------
*0213*
1. Node 설치
- git 터미널에 (node -v) 설치된지 확인방법
- node ./파일명 콘솔창 확인 방법

2. 

console.log()
alert()
confrim()
document.write();

*JS에서 사용할 수 있는 웹브라우저 내장 함수
- alert() : 알림창 사용
- confirm() : 승인여부 사용
- prompt() : 사용자로하여금 어떤 값을 받고자 할떄 사용

* 웹브라우저 시스템 > window > 내장 함수
>cs = computer science = 컴퓨터 공학
> 유튜브/책 => 컴퓨터 운영체제
(*자료구조 / 알고리즘)
(*전공자 vs 비전공자)

* 지금까지 내가 작성해왔던 모든 html 문서들은 widow > document 공간에 저장되어있음

>document의 내장 함수 => write() : 웹브라우저 안에 출력하고자 할때
> document object model => DOM을 학습

* window = 객체
Browser Object Model = Bom을 학습
- 가장 최상위 시스템이이서 window 객체를 안써도 작동가능

*변수명 지을때 주의사항
1) 예약어 : 이미 JS&Window 사용중인 고유명사 
2) 변수명 작명 가장 앞에 사용할 수 있는 것들 : $, _, 영문자
3) 변수명 반드시 대,소문자 구분

-------------------------------------------------------------------------------------------------------------------------------
> 웹 브라우저가 개발자가 작성한 html문서를 읽는다 = parsing = parse = 분석하다
> 웹 브라우저가 scsript문서를 마주한 순간 html 문서의 parsing 일시정정지 후 script 빠져든다 = fetching
> JS 기본적으로 동기처리 방식 실챙 => 스크립트 언어 => 1차선 언어


모든 프로그래밍 언어 => 기초 & 기본토대 = 변수
변수 = > 변할 수 있는 수(* 값) => 값을 담아 놓을 때 사용
=> 바구니

"선언" = 생성, 만든다 / "할당" = 값을 넣는다


const 키워드로 변수를 선언하게 되면 const 안에 담긴 값을 상수라고 부름(* 고정값)
변수 <--> 상수

let 은 재선언은 불가능하고 재할당은 가능하다

> var / let /const

*자료형(태/식)
*JS 변수 할당 가능한 자료형
1) 숫자형 = number
2) 문자열 = string
3) 논리형 (*참/거짓) = boolean (true/ false / undefined = 아직 정의가 되지 않은 값 / null = 유효하지 않은 값)
4) 객체 => 여러개의 연관성이 있는 값을 하나로 묶어놓은 집합
5) 배열 = array
6) 심벌
7) 함수

* 사용자의 선택 => 페이지 혹은 결과값을 상이하게 출력
*JS: 문자 + 숫자 => 결과값이 무조건 문자

*typeof: 변수안에 담긴 값의 자료형태를 확인시켜주는 키워드

*템플릿리터럴: 변수 + 문자 혹은 숫자 등의 값을 출력하고자 하랟 중간에 연산자"+"를 굳이 넣지 않더라도 정상적으로 값을 출력시켜줄수 있는 문법
(백틱 ` `  = 문자, ${ } = 변수(숫자) )

*0214*
1. 변수
2. 자료형
3. 자료형 변환 - 형변환*
- 문자 => 숫자 Number()
- 숫자=>문자 String()
- 문자&숫자 => Boolean()

소수점 몇 번째까지 = .toFixed() 

4. 연산자
-산술연산자
-연결연산자
-할당연산자
-비교연산자
-논리연산자
(*삼항 조건연산자)
query: 질의하다, 질문하다

*0215*
5. 제어문
- 조건문
> if문
> if else문 (*else if)
> switch문 .. case

* 중첩가능
* 큰 전제를 먼저 조건을 걸고 시작한다


- 반복문
> for문
> forEach문
> for...in
> for....of
> while
> do...while
(break & continue)



---------------------------------------------------------------------------
*0219*

/// 문법 배우고 실행
/// 집가서 복습!!

6. 함수
=> 어떤 여러 기능 및 명령들을 하나로 묶어놓은 집합체/그룹
> 굳이 개별 기능, 명령들을 따로따로 독립적으로 실행시키지 않아도 구현이 가능하다

*인수 = 인자값
* local scope = 지역스코프 = 해당 변수를 특정영역안에서만 사용할 수 있도록 하는 변수값
* block scope = 블록스코프 = 해당 변수가 선언된 블록안에서만 유효한 변수값
* global scope = 전역스코프 = 해당 변수를 현 자바스크립트 파일 내 어디에서든 사용이 가능한 변수값

- 클래스 / 익명 / 화살표
- 매개변수 & 인수(인자값)
- return(함수결과값 반환)
- 스코프 (블록/지역/전역)
- var x / 지역스코프 변수 / const(권장)
- 즉시실행함수
- 변수선언 키워드 입력 X => 전역변수
- hoisting(*클래스함수 VS 익명함수 & 화살표)
- 콜백함수
- 1급시민
- 전개연사자 구문
- 나머지 매개변수
- 시간관련 내장함수 (* setInterval / clearInterval / setTimeout)
- 재귀함수

----------------------------------------------------------------------------------------------------------------------------

*0220* *0221*

7. DOM

html 문서안에 태그 및 이미지, 텍스트 요소를 입력하는 순간 웹 브라우저에서는 DOM Tree가 생성됨

- querySelector / getElement 
- innerText / innerHtml / textContent
- onclick 이벤트 핸들러
- classList
- add() <-> remove() = toggle()
- contains()
- form
- dom 선택자를 통해서 값을 찾아오는 방법 => value
> #, . , tag
> name
> form 배열 요소

*0222*

8.Event

*이벤트 /
=> 정적:동적 *이벤트
=> 사용자가 웹 앱 액션 행위를 하는것 => 무엇인가를 실행시켜주는 것

=> click / load / submit
*모든 이벤트에 해당하는 것은 아니나, 거의 대부분 웹에서 이벤트가 발생하게되면 이벤트 객체라는 것이 생성됨

- 이벤트 처리 방법
> 인라인 스크립트
> 외부 스크립트: 이벤트 핸들러
> 외부 스크립트: 이벤트 리스너

- 문서 로딩 이벤트
- 마우스 이벤트
-키보드 이벤트
- 폼 이벤트
- 이벤트 처리
- 인라인 스크립트 : html문서에 직접 이벤트 정의
- 외부스크립트 : 이벤트 핸들러
- 외부스크립트 : 이벤트 리스너
- 이벤트전파
>이벤트 버블링
>이벤트 캡쳐링

1. 웹 문서 로딩 이벤트 종류

*이벤트 종류*		*실행되는 순간*
load			문서 로딩이 종류되었을 떼
scroll			문서의 화면이 스크롤되었을 때
error			문서가 정확하게 로드되지 않았을 때
resize			문서 화면의 크기가 바뀌었을 때
abort			문서가 완전히 로딩되기 전에 불러오기를 멈추었을 때
unload			문서를 벗어나게 되었을때

2. 마우스 이벤트 종류

*이벤트 종류		*실행되는 순간
click			사용자가 html요소를 클릭했을 때
dbclick			사용자가 html요소를 더블 클릭했을 때
mousedown		사용자가 특정요소에서 마우스 버튼을 눌렀을 때
mousemove		사용자가 특정요소에서 마우스 포인터를 움직일 때
mouseover		마우스 포인터를 특정 요소 위로 옮길 때
mouseout		마우스 포인터가 특정 요소를 벗어날 때
mouseup			특정 요소 위에 올려놓은 마우스 버튼에서 손을 땔 때

3. 키보드 이벤트 종류

*이벤트 종류		*실행되는 순간
keydown			키를 누르는 순간 (어떤 키를 눌렀는가에 대한 관심)
keyup			키에서 손을 땔 때
keypress			키를 눌렀을 때 (키를 누르는 행위 그 자체에 대한 관심)(점차 사용하지 않는 추세)

4. 폼 이벤트 종류

*이벤트 종류		*실행되는 순간
submit			속성값을 갖고있는 버튼을 클릭했을 때
change			목록이나 체크등의 상태 변화가 발생했을 때(slect > option 변경)
focus			폼 요소에 마우스를 포커스 했을 때
blur			폼 요소에 포커스를 해제했을 때
reset			폼안에 있는 내용이 리셋되었을 때

5. 이벤트 객체 프로퍼티 & 메서드

*이벤트 객체 프로퍼티		*기능
charCode				keypress이벤트가 발생했을 때 어떤키를 눌렀는지 *유니코드* 값으로 반환해줄때
clientX				이벤트가 발생한 가로 위치값 반환
clientY				이벤트가 발생한 세로 위치값 반환
pageX				현재 작업하고 있는 html 전체문서를 기준으로 이벤트가 발생한 가로 위치값 반환
pageY				현재 작업하고 있는 html 전체문서를 기준으로 이벤트가 발생한 세로 위치값 반환
screenX				현재 화면을 기준으로 이벤트가 발생한 가로 위치값 반환
screenY				현재 화면을 기준으로 이벤트가 발생한 세로 위치값 반환
target				이벤트가 발생한 대상
altkey				이벤트가 발생했을때 alt를 클릭하고 있었는지 여부를 확인하고 true/false 값으로 반환
shiftkey				이벤트가 발생했을때 shift를 클릭하고 있었는지 여부를 확인하고 true/false 값으로 반환
code				키보드 이벤트(keydown)가 발생했을 떼 어떤 키를 입력했는지 확인하고자 할 때
				(*키의 코드값 반환)
key				키보드 이벤트(keydown)가 발생했을 떼 어떤 키를 입력했는지 확인하고자 할 때
				(*키의 이름값 반환)
preventDefault			기본적으로 탑재되어있는 기능을 무력화 하거나 취소시키고자 할 떄 사용


9. DOM 심화

- createElemnet()
- createTextNode()
- appendChild()
- createAttribute()
- setAttributeNode()
- remove()
- parentNode
- removeChild()

10. 객체
- window: 웹 브라우저 안에 있는 최상위 "객체"
> 내장객체: window 안에 기본적으로 탐재되어있는 객체
- Date() (날짜객체)
- 밀리초
- Math (수학객체)

*window 자주사용하는 프로퍼티

document			웹 브라우저에 출력될 문서 => html > body
innerhight			
screenX
screenY
scrollX				스크롤시 수평으로 이동한 만큼의 X좌표
scrollY
localStorge
sessionStorage
location				winodw객체의 현 위치를 URL로 표기

*window 자주사용하는 메서드(*함수)

alert()				웹 브라우저 알림창을 표시할 때
prompt()				사용자로부터 입력된 텍스트를 사용하고자 할 때
focus()				특정 윈도우창에 마우스 커서가 위치했을 때
open()				새로운 창을 열고자 할 떄
close()				현재 열려있는 창을 닫고자 할 때
confirm()				확인 및 취소 버튼이 있는 확인 창을 표시
print()				현재 웹 브라우저 문서를 출력하고자 할 때
scroll()				문서에서 특정 위치로 스크롤 하고자 할 때
scrollTo()				문서에서 지정한 위치까지 한번에 스크롤
stop()				웹 문서 로딩을 멈추게 하고 싶을 때

*Date() 프로토타입을 통해서 생성되는 인스턴스 객체가 사용할 수 있는 메서드
getFullYear()			연도 값을 가져올 때
getMonth()			월 값을 가져올 때 (0~11 숫자 / 0 === 1월)
getDate()				일 값을 가져올 때 (1~31 까지)
getDay()				요일 값을 가져올 떄 (0~6 까지 / 0 === 일요일)
getTime()				시간 값을 가져올 때 (1970년 1월 1일부터 현시점까지의 시간 / 밀리초)
getHours()			시 값 가져올 때
getMinutes()			분 값 가져올 때
getSeconds()			초 값 가져올 때

setFullYear()			연도 값을 설정할 때
setMonth()			월 값을 설정할 때 (0~11 숫자 / 0 === 1월)
setDate()				일 값을 설정할 때 (1~31 까지)
setDay()				요일 값을 설정할 떄 (0~6 까지 / 0 === 일요일)
setTime()				시간 값을 설정할 때 (1970년 1월 1일부터 현시점까지의 시간 / 밀리초)
setHours()			시 값 설정
setMinutes()			분 값 설정
setSeconds()			초 값 설정


10. 객체심화
-

11. 문자열 & 배열
- charAt() : 매개변수의 인덱스값을 가지고 있는 문자열을 찾아올 때 (*문자열[인덱스값]으로도 사용가능!)
- indexOf() : 매개변수의 무자열을 처음 찾았을 때의 인덱스 값을 찾아올 때
- startWith() : 문자열 전체에서 처음 시작하는 단어가 맞는지 확인 
(*매개변수 2개를 전달 : 첫번째 매개변수가 두번째 매개변수의 위치에서 시작)
- endWith()  : 위와 동일하게 작동 (*문자열의 뒤에서 시작)
- includes() : 문자열 안에 매개변수의 문자가 있으면 true / 아니면 false
- trim() / tirmStary() / trimEnd() : 문자열의 앞 뒤 전체 에서 빈문자열을 찾아서 없에주는 기능
- substring() : 매개변수는 1개 혹은 2개 입력가능 
> 매겨변수 1개 : 해당 매개변수의 인덱스값부터 문자열의 끝까지 모두 찾아오는 기능
> 매개변수 2개 : 첫번째 매개변수 부터 두번째 매개변수의 바로 앞가지 문자열을 찾아오는 기능
- slice() : 기본적으로 substring()과 문법이 동일하나 => 음수 매개변수를 인식한다.
- split() : 매개변수를 기준으로 값을 나눠서 배열로 변환시키는 함수

12.정규표현식


13. 배열
- map() : 기본 배열 데이터를 가여와서 연산처리 작업 후 새로운
- filter()
- reduce()

14. 복습 & ES6 문법
- 객체 & 배열 복습
- ES6 업그레이드 문법

1) 함수
> 매개변수 기본값 설정
> 나머지 매개변수 사용하는 방법

2) 배열
>서로다른 배열을 하나로 합치는 방법: [...arr, ...arr]
> 배열을 복제하는 방법: [...arr] => 원본,사본 배열의 연관 관계 X

3) 객체
>value를 찾아오는 방법 2가지 : 온점표기범 / 대괄호표기범(*문자열)
> 객체 key생성시, 외부함수를 활용

4) 심볼
- 심볼 값을 찾아올때에는 반드시 [](대괄호) 표시로 찾아와야 한다
- 심볼 전역요소로 생성 / 찾아올 수 있음
- 심볼 값을 복제해올 수 있는 방법: Symbol.for()
- 심볼 값에 매칭되어지는 값을 찾아오는 방법: Symbol.for(심볼값)

5) 구조분해할당
- 배열 및 객체 가능
- 구조분해할당하고자 하는 자료형의 타입을 값을 받는 요소에서도 동일하게 사용
- 객체의 경우 반드시 변수명 === 객체의 key 이름과 동일
- 배열의 경우 전개연산자를 활용해서 구조분해할당 가능
- 중첩객체에서 구조분해할당 하는 방법 => 가능

15. Map / set
- 기존 일반객체 & 배열객체의 장점을 모아서 만들어진 Map객체
- Map 객체
> key, value 구성
>각각 key에는 인덱스 존재
> key, value 추가  => set()
> Map 객체에서 특정 값을 가져올 때 => get()
> Map 객체에 특정 값이 존재하는지 확인 => hast()
> Map 객체에 특정 값을 삭제 => delete()


