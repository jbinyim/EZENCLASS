* Js => 싱글스레드로 작동하는 객체지향 객체지향 프로그래밍 언어
* JS 상위 레벨 이야기
- 명령형 프로그래밍 JS코드 작성
(*지향 / 보편)
- 선언형 프로그래밍 JS코드 작성
(*추세 / 트랜드)
- 실행문 / 표현식문


------------------------------------------------------------------------------------
*0213*
1. Node 설치
- git 터미널에 (node -v) 설치된지 확인방법
- node ./파일명 콘솔창 확인 방법

2. 

console.log()
alert()
confrim()
document.write();

*JS에서 사용할 수 있는 웹브라우저 내장 함수
- alert() : 알림창 사용
- confirm() : 승인여부 사용
- prompt() : 사용자로하여금 어떤 값을 받고자 할떄 사용

* 웹브라우저 시스템 > window > 내장 함수
>cs = computer science = 컴퓨터 공학
> 유튜브/책 => 컴퓨터 운영체제
(*자료구조 / 알고리즘)
(*전공자 vs 비전공자)

* 지금까지 내가 작성해왔던 모든 html 문서들은 widow > document 공간에 저장되어있음

>document의 내장 함수 => write() : 웹브라우저 안에 출력하고자 할때
> document object model => DOM을 학습

* window = 객체
Browser Object Model = Bom을 학습
- 가장 최상위 시스템이이서 window 객체를 안써도 작동가능

*변수명 지을때 주의사항
1) 예약어 : 이미 JS&Window 사용중인 고유명사 
2) 변수명 작명 가장 앞에 사용할 수 있는 것들 : $, _, 영문자
3) 변수명 반드시 대,소문자 구분
4) 
-------------------------------------------------------------------------------------------------------------------------------
> 웹 브라우저가 개발자가 작성한 html문서를 읽는다 = parsing = parse = 분석하다
> 웹 브라우저가 scsript문서를 마주한 순간 html 문서의 parsing 일시정정지 후 script 빠져든다 = fetching
> JS 기본적으로 동기처리 방식 실챙 => 스크립트 언어 => 1차선 언어


모든 프로그래밍 언어 => 기초 & 기본토대 = 변수
변수 = > 변할 수 있는 수(* 값) => 값을 담아 놓을 때 사용
=> 바구니

"선언" = 생성, 만든다 / "할당" = 값을 넣는다


const 키워드로 변수를 선언하게 되면 const 안에 담긴 값을 상수라고 부름(* 고정값)
변수 <--> 상수

let 은 재선언은 불가능하고 재할당은 가능하다

> var / let /const

*자료형(태/식)
*JS 변수 할당 가능한 자료형
1) 숫자형 = number
2) 문자열 = string
3) 논리형 (*참/거짓) = boolean (true/ false / undefined = 아직 정의가 되지 않은 값 / null = 유효하지 않은 값)
4) 객체 => 여러개의 연관성이 있는 값을 하나로 묶어놓은 집합
5) 배열 = array
6) 심벌
7) 함수

* 사용자의 선택 => 페이지 혹은 결과값을 상이하게 출력
*JS: 문자 + 숫자 => 결과값이 무조건 문자

*typeof: 변수안에 담긴 값의 자료형태를 확인시켜주는 키워드

*템플릿리터럴: 변수 + 문자 혹은 숫자 등의 값을 출력하고자 하랟 중간에 연산자"+"를 굳이 넣지 않더라도 정상적으로 값을 출력시켜줄수 있는 문법
(백틱 ` `  = 문자, ${ } = 변수(숫자) )

*0214*
1. 변수
2. 자료형
3. 자료형 변환 - 형변환*
- 문자 => 숫자 Number()
- 숫자=>문자 String()
- 문자&숫자 => Boolean()

소수점 몇 번째까지 = .toFixed() 

4. 연산자
-산술연산자
-연결연산자
-할당연산자
-비교연산자
-논리연산자
(*삼항 조건연산자)
query: 질의하다, 질문하다

*0215*
5. 제어문
- 조건문
> if문
> if else문 (*else if)
> switch문 .. case

* 중첩가능
* 큰 전제를 먼저 조건을 걸고 시작한다


- 반복문
> for문
> forEach문
> for...in
> for....of
> while
> do...while
(break & continue)



---------------------------------------------------------------------------
*0219*

/// 문법 배우고 실행
/// 집가서 복습!!

6. 함수
=> 어떤 여러 기능 및 명령들을 하나로 묶어놓은 집합체/그룹
> 굳이 개별 기능, 명령들을 따로따로 독립적으로 실행시키지 않아도 구현이 가능하다

*인수 = 인자값
* local scope = 지역스코프 = 해당 변수를 특정영역안에서만 사용할 수 있도록 하는 변수값
* block scope = 블록스코프 = 해당 변수가 선언된 블록안에서만 유효한 변수값
* global scope = 전역스코프 = 해당 변수를 현 자바스크립트 파일 내 어디에서든 사용이 가능한 변수값

- 클래스 / 익명 / 화살표
- 매개변수 & 인수(인자값)
- return(함수결과값 반환)
- 스코프 (블록/지역/전역)
- var x / 지역스코프 변수 / const(권장)
- 즉시실행함수
- 변수선언 키워드 입력 X => 전역변수
- hoisting(*클래스함수 VS 익명함수 & 화살표)
- 콜백함수
- 1급시민
- 전개연사자 구문
- 나머지 매개변수
- 시간관련 내장함수 (* setInterval / clearInterval / setTimeout)
- 재귀함수

----------------------------------------------------------------------------------------------------------------------------

*0220* *0221*

7. DOM

html 문서안에 태그 및 이미지, 텍스트 요소를 입력하는 순간 웹 브라우저에서는 DOM Tree가 생성됨

- querySelector / getElement 
- innerText / innerHtml / textContent
- onclick 이벤트 핸들러
- classList
- add() <-> remove() = toggle()
- contains()
- form
- dom 선택자를 통해서 값을 찾아오는 방법 => value
> #, . , tag
> name
> form 배열 요소

*0221*
